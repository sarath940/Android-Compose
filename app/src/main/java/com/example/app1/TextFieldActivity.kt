package com.example.app1import android.os.Bundleimport androidx.activity.ComponentActivityimport androidx.activity.compose.setContentimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.text.KeyboardActionsimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Favoriteimport androidx.compose.material.icons.filled.Infoimport androidx.compose.material.icons.materialIconimport androidx.compose.material.icons.materialPathimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.ExperimentalComposeUiApiimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.platform.LocalSoftwareKeyboardControllerimport androidx.compose.ui.semantics.semanticsimport androidx.compose.ui.text.TextRangeimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.text.input.VisualTransformationimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport com.example.app1.ui.theme.App1Themeclass TextFieldActivity : ComponentActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContent {            App1Theme {                // A surface container using the 'background' color from the theme                Surface(                    modifier = Modifier.fillMaxSize(),                    color = MaterialTheme.colorScheme.background                ) {                }            }        }    }}// this is for the code samples for the below examples.//https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/material3/material3/samples/src/main/java/androidx/compose/material3/samples/TextFieldSamples.kt@OptIn(ExperimentalMaterial3Api::class)@Preview@Composablefun SimpleTextFieldSample() {    var text by rememberSaveable {        mutableStateOf("")    }    TextField(        value = text,        onValueChange = { text = it },        label = { Text(text = "Label") },        singleLine = true    )}@OptIn(ExperimentalMaterial3Api::class)@Preview@Composablefun SimpleOutlinedTextFieldSample() {    var text by rememberSaveable {        mutableStateOf("")    }    OutlinedTextField(        value = text,        onValueChange = { text = it },        label = { Text(text = "Outlined TextField") })}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun TextFieldWithIcons() {    var text by rememberSaveable {        mutableStateOf("")    }    TextField(value = text,        onValueChange = { text = it },        label = { Text("TextFieldWithIcons") },        leadingIcon = { Icon(Icons.Filled.Favorite, contentDescription = "Localized description") },        trailingIcon = { Icon(Icons.Filled.Info, contentDescription = "Localized description") })}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun TextFieldWithPlaceFolders() {    var text by rememberSaveable {        mutableStateOf("")    }    TextField(        value = text,        onValueChange = { text = it },        label = { Text("Text Field With PlaceHolders") },        placeholder = { Text("PlaceHolder") })}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun TextFieldWithErrorState() {    val errorMessage = "Text input too long"    var text by rememberSaveable { mutableStateOf("") }    var isError by rememberSaveable { mutableStateOf(false) }    val charLimit = 10    fun validate(text: String) {        isError = text.length > charLimit    }    TextField(        value = text,        onValueChange = {            text = it            validate(text)        },        singleLine = true,        label = { Text(if (isError) "Username*" else "Username") },        supportingText = {            Text(                modifier = Modifier.fillMaxWidth(),                text = "Limit: ${text.length}/$charLimit",                textAlign = TextAlign.End,            )        },        isError = isError,        keyboardActions = KeyboardActions { validate(text) },        modifier = Modifier.semantics {            // Provide localized description of the error            try {                if (isError) error(errorMessage)            } catch (e: IllegalStateException) {                // Handle the exception, e.g., log it                error("Error in input")            }        }    )}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun PasswordTextField() {    var password by rememberSaveable {        mutableStateOf("")    }    var passwordHidden by rememberSaveable {        mutableStateOf(true)    }    TextField(        value = password,        onValueChange = { password = it },        singleLine = true,        label = {            Text(                text = "Password"            )        },        visualTransformation = if (passwordHidden) PasswordVisualTransformation() else VisualTransformation.None,        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),        trailingIcon = {            IconButton(onClick = { passwordHidden = !passwordHidden }) {                val visibilityIcon =                    if (passwordHidden) Icons.Filled.Visibility else Icons.Filled.VisibilityOff                val description = if (passwordHidden) "Show Password" else "Hide Password"                Icon(imageVector = visibilityIcon, contentDescription = description)            }        }    )}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun TextFieldSample() {    //Add a text to the text field at starting of the screen open    var text by rememberSaveable(stateSaver = TextFieldValue.Saver) {        mutableStateOf(TextFieldValue("Example", TextRange(0, 7)))    }    TextField(value = text, onValueChange = { text = it }, label = { Text("Label") })}@Preview@OptIn(ExperimentalMaterial3Api::class)@Composablefun OutlineTextFieldSample() {    var text by rememberSaveable(stateSaver = TextFieldValue.Saver) {        mutableStateOf(TextFieldValue("Example", TextRange(0, 7)))    }    OutlinedTextField(value = text, onValueChange = { text = it }, label = { Text("Label") })}@Preview@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)@Composablefun TextFieldWithHideKeyboardOnImeAction() {    val keyBoardController = LocalSoftwareKeyboardController.current    var text by rememberSaveable() {        mutableStateOf("")    }    TextField(        value = text,        onValueChange = { text = it },        label = { Text("Label") },        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),        keyboardActions = KeyboardActions(onDone = { keyBoardController?.hide() })    )}/** We copy the implementation of Visibility and VisibilityOff icons to showcase them in the * password text field sample but to avoid adding material-icons-extended library as a dependency * to the samples not to increase the build time */private val Icons.Filled.Visibility: ImageVector    get() {        if (_visibility != null) {            return _visibility!!        }        _visibility = materialIcon(name = "Filled.Visibility") {            materialPath {                moveTo(12.0f, 4.5f)                curveTo(7.0f, 4.5f, 2.73f, 7.61f, 1.0f, 12.0f)                curveToRelative(1.73f, 4.39f, 6.0f, 7.5f, 11.0f, 7.5f)                reflectiveCurveToRelative(9.27f, -3.11f, 11.0f, -7.5f)                curveToRelative(-1.73f, -4.39f, -6.0f, -7.5f, -11.0f, -7.5f)                close()                moveTo(12.0f, 17.0f)                curveToRelative(-2.76f, 0.0f, -5.0f, -2.24f, -5.0f, -5.0f)                reflectiveCurveToRelative(2.24f, -5.0f, 5.0f, -5.0f)                reflectiveCurveToRelative(5.0f, 2.24f, 5.0f, 5.0f)                reflectiveCurveToRelative(-2.24f, 5.0f, -5.0f, 5.0f)                close()                moveTo(12.0f, 9.0f)                curveToRelative(-1.66f, 0.0f, -3.0f, 1.34f, -3.0f, 3.0f)                reflectiveCurveToRelative(1.34f, 3.0f, 3.0f, 3.0f)                reflectiveCurveToRelative(3.0f, -1.34f, 3.0f, -3.0f)                reflectiveCurveToRelative(-1.34f, -3.0f, -3.0f, -3.0f)                close()            }        }        return _visibility!!    }private var _visibility: ImageVector? = nullprivate val Icons.Filled.VisibilityOff: ImageVector    get() {        if (_visibilityOff != null) {            return _visibilityOff!!        }        _visibilityOff = materialIcon(name = "Filled.VisibilityOff") {            materialPath {                moveTo(12.0f, 7.0f)                curveToRelative(2.76f, 0.0f, 5.0f, 2.24f, 5.0f, 5.0f)                curveToRelative(0.0f, 0.65f, -0.13f, 1.26f, -0.36f, 1.83f)                lineToRelative(2.92f, 2.92f)                curveToRelative(1.51f, -1.26f, 2.7f, -2.89f, 3.43f, -4.75f)                curveToRelative(-1.73f, -4.39f, -6.0f, -7.5f, -11.0f, -7.5f)                curveToRelative(-1.4f, 0.0f, -2.74f, 0.25f, -3.98f, 0.7f)                lineToRelative(2.16f, 2.16f)                curveTo(10.74f, 7.13f, 11.35f, 7.0f, 12.0f, 7.0f)                close()                moveTo(2.0f, 4.27f)                lineToRelative(2.28f, 2.28f)                lineToRelative(0.46f, 0.46f)                curveTo(3.08f, 8.3f, 1.78f, 10.02f, 1.0f, 12.0f)                curveToRelative(1.73f, 4.39f, 6.0f, 7.5f, 11.0f, 7.5f)                curveToRelative(1.55f, 0.0f, 3.03f, -0.3f, 4.38f, -0.84f)                lineToRelative(0.42f, 0.42f)                lineTo(19.73f, 22.0f)                lineTo(21.0f, 20.73f)                lineTo(3.27f, 3.0f)                lineTo(2.0f, 4.27f)                close()                moveTo(7.53f, 9.8f)                lineToRelative(1.55f, 1.55f)                curveToRelative(-0.05f, 0.21f, -0.08f, 0.43f, -0.08f, 0.65f)                curveToRelative(0.0f, 1.66f, 1.34f, 3.0f, 3.0f, 3.0f)                curveToRelative(0.22f, 0.0f, 0.44f, -0.03f, 0.65f, -0.08f)                lineToRelative(1.55f, 1.55f)                curveToRelative(-0.67f, 0.33f, -1.41f, 0.53f, -2.2f, 0.53f)                curveToRelative(-2.76f, 0.0f, -5.0f, -2.24f, -5.0f, -5.0f)                curveToRelative(0.0f, -0.79f, 0.2f, -1.53f, 0.53f, -2.2f)                close()                moveTo(11.84f, 9.02f)                lineToRelative(3.15f, 3.15f)                lineToRelative(0.02f, -0.16f)                curveToRelative(0.0f, -1.66f, -1.34f, -3.0f, -3.0f, -3.0f)                lineToRelative(-0.17f, 0.01f)                close()            }        }        return _visibilityOff!!    }private var _visibilityOff: ImageVector? = null